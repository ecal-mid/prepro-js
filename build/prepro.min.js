/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Base Service
 */
var BaseService = function (_EventDispatcher) {
  _inherits(BaseService, _EventDispatcher);

  /**
   * @param {Object} data The raw data loaded by the loader.
   */
  function BaseService(data) {
    _classCallCheck(this, BaseService);

    var _this = _possibleConstructorReturn(this, (BaseService.__proto__ || Object.getPrototypeOf(BaseService)).call(this, data));

    _this.currLoaded_ = 0;
    _this.frames = [];
    _this.data_ = null;
    _this.data = data;
    return _this;
  }

  /**
   * Returns the processed data for the frame at i.
   * @param  {Integer} i Id of the frame.
   * @return {Object} The processed frame data
   */


  _createClass(BaseService, [{
    key: 'getFrame',
    value: function getFrame(i) {
      return this.frames[i];
    }

    /**
     * Returns the loading/processing status.
     * @return {Object} { loaded:Id of the current frame loaded,
     *                    total: Total number of frames}
     */

  }, {
    key: 'getStatus',
    value: function getStatus() {
      return {
        loaded: this.currLoaded_,
        total: this.frames.length
      };
    }

    /**
     * Sets the raw data.
     * Classes that extend BaseService should override this setter and process
     * the raw data into an optimized format for runtime use.
     * @param  {Object} d The raw data loaded by the loader.
     */

  }, {
    key: 'data',
    set: function set(d) {
      this.data_ = d;
    }

    /**
     * Returns the raw data.
     * @return {Object} The raw data.
     */
    ,
    get: function get() {
      return this.data_;
    }
  }]);

  return BaseService;
}(_utils.EventDispatcher);

module.exports = BaseService;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Minimalist Event Dispatcher
 * @ignore
 */
var EventDispatcher = function () {
  /**
   *
   */
  function EventDispatcher() {
    _classCallCheck(this, EventDispatcher);

    this.handlers_ = {};
  }

  /**
   * Adds an event listener.
   * @param  {string} event   Name of the event.
   * @param  {function} handler Function called when the event is triggered.
   */


  _createClass(EventDispatcher, [{
    key: "addEventListener",
    value: function addEventListener(event, handler) {
      this.handlers_[event] = this.handlers_[event] || [];
      this.handlers_[event].push(handler);
    }

    /**
     * Dispatch an event.
     * @param  {string} event   Name of the event.
     * @param  {*}      data    Data payload.
     * @protected
     */

  }, {
    key: "dispatch",
    value: function dispatch(event, data) {
      var handlers = this.handlers_[event];
      if (handlers) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = handlers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var handler = _step.value;

            handler(data);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }
  }]);

  return EventDispatcher;
}();

module.exports = { EventDispatcher: EventDispatcher };

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(3);
module.exports = __webpack_require__(28);


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _debug_view = __webpack_require__(4);

var _debug_view2 = _interopRequireDefault(_debug_view);

var _loader = __webpack_require__(18);

var _loader2 = _interopRequireDefault(_loader);

var _services = __webpack_require__(19);

var _services2 = _interopRequireDefault(_services);

var _utils = __webpack_require__(1);

var _video = __webpack_require__(27);

var _video2 = _interopRequireDefault(_video);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DEFAULT_CONFIG_FILENAME = 'prepro.json';
var DEFAULT_VIDEO_FILENAME = 'source.mov';

/**
 * Main Prepro class.
 *
 * This class is instanciated automatically in a global 'prepro' object.
 *
 * It dispatch and propagate the following events:
 *  - `ready` : Dispatched when a service has finished parsing its data.
 *  - `update` : Dispatched when the video frame has changed.
 *
 * @example <caption>Preloading the data and play the video:</caption>
 * prepro.load('prepro-video-export').then(() => {
 *    prepro.play();
 * });
 *
 * @example <caption>Listening for a service ready event:</caption>
 * prepro.addEventListener('ready', (service) => {
 *    console.log(service);
 * });
 */

var Prepro = function (_EventDispatcher) {
  _inherits(Prepro, _EventDispatcher);

  /**
   * Instanciate the Prepro class.
   */
  function Prepro() {
    _classCallCheck(this, Prepro);

    var _this = _possibleConstructorReturn(this, (Prepro.__proto__ || Object.getPrototypeOf(Prepro)).call(this));

    _this.services = new _services2.default();
    _this.frames = [];
    _this.config = {};
    _this.data = [];
    _this.video = null;
    _this.debugView = null;

    /**
     * The internal cache for currentFrame object
     * @type {Number}
     * @private
     */
    _this.currentFrame_ = 0;
    _this.events_ = {};
    return _this;
  }

  /**
   * Loads a prepro data folder generated by the CLI.
   * @param  {String} folder The prepro data folder that contains prepro.json
   * @param  {String} services [optional] specify which services to load.
   * @return {Promise}       A Promise that completes when everything is loaded.
   */


  _createClass(Prepro, [{
    key: 'load',
    value: function load(folder, services) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        fetch(folder + '/' + DEFAULT_CONFIG_FILENAME).then(function (data) {
          return data.json();
        }).then(function (config) {
          _this2.config = config;
          _this2.config['folder'] = folder;
          _this2.config['services_filter'] = services;
          var videoFile = folder + '/' + DEFAULT_VIDEO_FILENAME;
          _this2.video = new _video2.default(videoFile, config);
          _this2.video.addEventListener('update', function (e) {
            return _this2.dispatch('update', e);
          });
          (0, _loader2.default)(folder, config).then(function (data) {
            _this2.data = data;
            _this2.services.setup(data);
            _this2.services.addEventListener('ready', function (e) {
              return _this2.dispatch('ready', e);
            });
            resolve();
          }).catch(reject);
        });
      });
    }

    /**
     * Add video element to container.
     * @param {Element|String} el View container element or query selector.
     */

  }, {
    key: 'showVideo',
    value: function showVideo(el) {
      if (typeof el == 'string') {
        el = document.querySelector(el);
      }
      el.appendChild(this.video.el_);
    }

    /**
     * Add debug view helper.
     * @param {Element|String} el View container element or query selector.
     */

  }, {
    key: 'addDebugView',
    value: function addDebugView(el) {
      if (typeof el == 'string') {
        el = document.querySelector(el);
      }
      this.debugView = new _debug_view2.default(this.video, el || document.body);
    }

    /**
     * Returns a snapshot of all the availalbe services for the current frame.
     * @return {Dictionary} The snapshot
     */

  }, {
    key: 'play',


    /**
     * Plays the video.
     */
    value: function play() {
      this.video.play();
    }

    /**
     * Pauses the video.
     */

  }, {
    key: 'pause',
    value: function pause() {
      this.video.pause();
    }
  }, {
    key: 'currentFrame',
    get: function get() {
      if (!this.video) {
        return null;
      }
      var frameId = this.video.currentFrame;
      if (frameId != this.currentFrame_.id) {
        this.currentFrame_ = this.services.getFrame(frameId);
      }
      return this.currentFrame_;
    }
  }]);

  return Prepro;
}(_utils.EventDispatcher);

if (window) {
  window.prepro = new Prepro();
}

module.exports = Prepro;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _timeline = __webpack_require__(5);

var _timeline2 = _interopRequireDefault(_timeline);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DebugView = function () {
  function DebugView(video, container) {
    _classCallCheck(this, DebugView);

    this.video = video;
    this.video.addEventListener('update', this.update.bind(this));

    this.el = document.createElement('div');
    // el.classList.add('prepro-container');
    this.el.classList.add('prepro-view', 'prepro-reactive');
    this.el.innerHTML = '\n      <div class="prepro-timeline-cursor"></div>\n      <div class="prepro-timeline-cursor-bg"></div>\n      <div class="prepro-services"></div>\n    ';
    container.append(this.el);

    this.timeline = new _timeline2.default(this.el);

    this.servicesViews_ = {};

    this.setupAutoHide_(2000);
    window.addEventListener('resize', this.onWindowResize_.bind(this));

    this.showFrameDetails(prepro.currentFrame);
  }

  _createClass(DebugView, [{
    key: 'update',
    value: function update() {
      this.timeline.update(this.video.percent);
      this.showFrameDetails(prepro.currentFrame);
    }
  }, {
    key: 'showFrameDetails',
    value: function showFrameDetails(frame) {
      for (var serviceName in frame) {
        if (!frame[serviceName]) {
          continue;
        }
        if (serviceName == 'id') {
          continue;
        }
        if (!this.servicesViews_[serviceName]) {
          var ServiceViewClass = __webpack_require__(6)("./" + serviceName + '/view');
          if (!ServiceViewClass) {
            continue;
          }
          var serviceEl = this.el.querySelector('.prepro-services');
          this.servicesViews_[serviceName] = new ServiceViewClass(serviceEl);
        }
        this.servicesViews_[serviceName].show(frame[serviceName]);
      }
    }
  }, {
    key: 'getServiceView',
    value: function getServiceView(serviceName) {
      return this.servicesViews_[serviceName];
    }
  }, {
    key: 'onWindowResize_',
    value: function onWindowResize_(evt) {
      for (var serviceView in this.servicesViews_) {
        var v = this.servicesViews_[serviceView];
        if (v.resize) {
          v.resize();
        }
      }
    }
  }, {
    key: 'setupAutoHide_',
    value: function setupAutoHide_(delay) {
      var _this = this;

      var hideTimeout = null;
      this.el.classList.add('prepro-autohide');
      var autohide = function autohide() {
        _this.el.classList.remove('prepro-hidden');
        clearTimeout(hideTimeout);
        hideTimeout = setTimeout(function () {
          return _this.el.classList.add('prepro-hidden');
        }, delay);
      };

      this.el.addEventListener('mouseover', function (evt) {
        window.removeEventListener('mousemove', autohide, false);
        clearTimeout(hideTimeout);
      });

      this.el.addEventListener('mouseleave', function (evt) {
        window.addEventListener('mousemove', autohide, false);
      });
      window.addEventListener('mousemove', autohide, false);
      autohide();
    }
  }]);

  return DebugView;
}();

module.exports = DebugView;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var TimelineView = function () {
  function TimelineView(container) {
    _classCallCheck(this, TimelineView);

    this.container = container;
    this.cursor = container.querySelector('.prepro-timeline-cursor');
    container.addEventListener('mouseover', this.onMouseOver_.bind(this), false);
    container.addEventListener('mousemove', this.onMouseMove_.bind(this), false);
  }

  _createClass(TimelineView, [{
    key: 'update',
    value: function update(pct) {
      this.cursor.style.width = pct * 100 + '%';
    }

    /* PRIVATE */

  }, {
    key: 'onMouseMove_',
    value: function onMouseMove_(event) {
      var pct = event.clientX / this.container.clientWidth;
      prepro.video.percent = pct;
    }
  }, {
    key: 'onMouseOver_',
    value: function onMouseOver_(event) {
      prepro.video.pause();
    }
  }]);

  return TimelineView;
}();

module.exports = TimelineView;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./colors/view": 7,
	"./flow/view": 9,
	"./openpose/view": 11,
	"./segmentation/view": 13,
	"./sift/view": 15,
	"./spectrogram/view": 17
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 6;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var tpl = __webpack_require__(8);

var ColorsView = function () {
  function ColorsView(container) {
    _classCallCheck(this, ColorsView);

    this.el = document.createElement('div');
    this.el.classList.add('prepro-block', 'prepro-colors');
    container.appendChild(this.el);
  }

  _createClass(ColorsView, [{
    key: 'show',
    value: function show(colors) {
      this.el.innerHTML = tpl({ colors: colors });
    }
  }]);

  return ColorsView;
}();

module.exports = ColorsView;

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = function (obj) {
obj || (obj = {});
var __t, __p = '', __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }
with (obj) {
__p += '<h1 class="prepro-title">Color Palette</h1>\n<div class="prepro-palette">\n';
 for (let color of colors) { ;
__p += '\n  <div class="prepro-color" style="background-color:' +
((__t = (color)) == null ? '' : __t) +
'"></div>\n';
 } ;
__p += '\n</div>\n';

}
return __p
}

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var tpl = __webpack_require__(10);

var FlowView = function () {
  function FlowView(container) {
    _classCallCheck(this, FlowView);

    this.container = container;

    this.el = document.createElement('div');
    this.el.classList.add('prepro-block', 'prepro-flow');
    this.el.innerHTML = tpl({ config: prepro.config });
    container.appendChild(this.el);

    this.canvas = this.el.querySelector('canvas');
    this.ctx = this.canvas.getContext('2d');

    // Routine to show the updated status.
    var statusEl = this.el.querySelector('.prepro-flow-status');
    var itvl = setInterval(function () {
      var service = prepro.services.get('flow');
      var status = service.getStatus();
      statusEl.innerHTML = 'processing ' + status.loaded + ' / ' + status.total;
      if (status.loaded >= status.total) {
        statusEl.remove();
        clearInterval(itvl);
      }
    }, 100);
  }

  _createClass(FlowView, [{
    key: 'show',
    value: function show(data) {
      if (!data) {
        return;
      }
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      var frame = data.canvas;
      this.ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);
    }
  }]);

  return FlowView;
}();

module.exports = FlowView;

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = function (obj) {
obj || (obj = {});
var __t, __p = '';
with (obj) {
__p += '<h1 class="prepro-title">Optical Flow</h1>\n<span class="prepro-flow-status"></span>\n<canvas width="' +
((__t = ( config.width )) == null ? '' : __t) +
'" height="' +
((__t = ( config.height )) == null ? '' : __t) +
'"></canvas>\n';

}
return __p
}

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var tpl = __webpack_require__(12);

var OpenposeView = function () {
  function OpenposeView(container) {
    _classCallCheck(this, OpenposeView);

    this.container = container;

    this.el = document.createElement('div');
    this.el.classList.add('prepro-block', 'prepro-openpose');
    this.el.innerHTML = tpl({ config: prepro.config });
    container.appendChild(this.el);

    this.canvas = this.el.querySelector('canvas');
    this.ctx = this.canvas.getContext('2d');
  }

  _createClass(OpenposeView, [{
    key: 'show',
    value: function show(data) {
      if (!data) {
        return;
      }

      var ctx = this.ctx;

      ctx.canvas.width = ctx.canvas.height * prepro.config.width / prepro.config.height;

      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

      ctx.fillStyle = 'white';
      var joints = [
      // neck
      [0, 1],
      // left shoulder & arm
      [1, 2, 3, 4],
      // right shoulder & arm
      [1, 5, 6, 7],
      // left body & leg
      [1, 8, 9, 10],
      // right body & leg
      [1, 11, 12, 13]];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var pose = _step.value;

          var pts = pose['pose_keypoints'];
          for (var i = 0; i < pts.length / 3; i++) {
            var x = pts[i * 3];
            var y = pts[i * 3 + 1];
            var c = pts[i * 3 + 2];
            ctx.fillStyle = 'rgba(255, 255, 255, ' + c + ')';
            ctx.beginPath();
            ctx.arc(x, y, 5, 0, 2 * Math.PI);
            ctx.fill();
          }

          ctx.lineWidth = 8;
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = joints[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var j = _step2.value;

              ctx.beginPath();
              var _c = pts[j[0] * 3 + 2];
              if (_c > 0.2) {
                ctx.moveTo(pts[j[0] * 3], pts[j[0] * 3 + 1]);
              }
              var _iteratorNormalCompletion3 = true;
              var _didIteratorError3 = false;
              var _iteratorError3 = undefined;

              try {
                for (var _iterator3 = j[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                  var pi = _step3.value;

                  var _c2 = pts[pi * 3 + 2];
                  if (_c2 > 0.1) {
                    ctx.strokeStyle = 'rgba(255, 255, 255, ' + _c2 + ')';
                    ctx.lineTo(pts[pi * 3], pts[pi * 3 + 1]);
                  }
                }
              } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion3 && _iterator3.return) {
                    _iterator3.return();
                  }
                } finally {
                  if (_didIteratorError3) {
                    throw _iteratorError3;
                  }
                }
              }

              ctx.stroke();
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: 'resize',
    value: function resize() {
      var w = this.ctx.canvas.clientHeight * prepro.config.width / prepro.config.height;
      this.ctx.canvas.style.width = w + 'px';
    }
  }]);

  return OpenposeView;
}();

module.exports = OpenposeView;

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = function (obj) {
obj || (obj = {});
var __t, __p = '';
with (obj) {
__p += '<h1 class="prepro-title">Pose Detection</h1>\n<canvas class="open-pose" width="' +
((__t = ( config.width )) == null ? '' : __t) +
'" height="' +
((__t = ( config.height )) == null ? '' : __t) +
'"></canvas>\n';

}
return __p
}

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var tpl = __webpack_require__(14);

var FlowView = function () {
  function FlowView(container) {
    _classCallCheck(this, FlowView);

    this.container = container;

    this.el = document.createElement('div');
    this.el.classList.add('prepro-block', 'prepro-segmentation');
    this.el.innerHTML = tpl({ config: prepro.config });
    container.appendChild(this.el);

    this.canvas = this.el.querySelector('canvas');
    this.ctx = this.canvas.getContext('2d');

    // Routine to show the updated status.
    var statusEl = this.el.querySelector('.prepro-segmentation-status');
    var itvl = setInterval(function () {
      var service = prepro.services.get('segmentation');
      var status = service.getStatus();
      statusEl.innerHTML = 'processing ' + status.loaded + ' / ' + status.total;
      if (status.loaded >= status.total) {
        statusEl.remove();
        clearInterval(itvl);
      }
    }, 100);
  }

  _createClass(FlowView, [{
    key: 'show',
    value: function show(data) {
      if (!data) {
        return;
      }
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      var frame = data.canvas;
      this.ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);
    }
  }]);

  return FlowView;
}();

module.exports = FlowView;

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = function (obj) {
obj || (obj = {});
var __t, __p = '';
with (obj) {
__p += '<h1 class="prepro-title">Segmentation</h1>\n<span class="prepro-segmentation-status"></span>\n<canvas width="' +
((__t = ( config.width )) == null ? '' : __t) +
'" height="' +
((__t = ( config.height )) == null ? '' : __t) +
'"></canvas>\n';

}
return __p
}

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var tpl = __webpack_require__(16);

var SiftView = function () {
  function SiftView(container) {
    _classCallCheck(this, SiftView);

    this.container = container;

    this.el = document.createElement('div');
    this.el.classList.add('prepro-block', 'prepro-sift');
    this.el.innerHTML = tpl({ config: prepro.config });
    container.appendChild(this.el);

    this.canvas = this.el.querySelector('canvas');
    this.ctx = this.canvas.getContext('2d');
  }

  _createClass(SiftView, [{
    key: 'show',
    value: function show(data) {
      if (!data) {
        return;
      }

      var ctx = this.ctx;

      ctx.canvas.width = ctx.canvas.height * prepro.config.width / prepro.config.height;

      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

      ctx.fillStyle = 'blue';
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = data.keypointsA[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var kp = _step.value;

          ctx.beginPath();
          ctx.arc(kp.x, kp.y, 2, 0, 2 * Math.PI);
          ctx.fill();
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      ctx.strokeStyle = 'red';
      ctx.fillStyle = 'white';
      ctx.lineWidth = 1;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = data.matches[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var m = _step2.value;

          var kp1 = data.keypointsA[m.keypointA];
          var kp2 = data.keypointsB[m.keypointB];

          if (!kp1 || !kp2) {
            continue;
          }

          var dx = kp2.x - kp1.x;
          var dy = kp2.y - kp1.y;
          if (dx > 3 || dy > 3) {
            continue;
          }

          ctx.beginPath();
          ctx.arc(kp1.x, kp1.y, 2, 0, 2 * Math.PI);
          ctx.fill();

          ctx.beginPath();
          ctx.moveTo(kp1.x, kp1.y);
          ctx.lineTo(kp1.x + dx * 20, kp1.y + dy * 20);
          ctx.stroke();
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }, {
    key: 'resize',
    value: function resize() {
      var w = this.ctx.canvas.clientHeight * prepro.config.width / prepro.config.height;
      this.ctx.canvas.style.width = w + 'px';
    }
  }]);

  return SiftView;
}();

module.exports = SiftView;

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = function (obj) {
obj || (obj = {});
var __t, __p = '';
with (obj) {
__p += '<h1 class="prepro-title">SIFT Keypoints</h1>\n<canvas width="' +
((__t = ( config.width )) == null ? '' : __t) +
'" height="' +
((__t = ( config.height )) == null ? '' : __t) +
'"></canvas>\n';

}
return __p
}

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SpectrogramDebugView = function () {
  function SpectrogramDebugView(container) {
    _classCallCheck(this, SpectrogramDebugView);

    this.container = container;

    this.el = document.createElement('div');
    this.el.classList.add('prepro-block', 'prepro-spectrogram');
    this.el.innerHTML = '\n      <h1 class="prepro-title">Sound Spectrum</h1>\n      <canvas class="prepro-soundspectrum" width="300" height="200"></canvas>\n    ';
    container.appendChild(this.el);

    this.canvas = this.el.querySelector('canvas');
    this.ctx = this.canvas.getContext('2d');
  }

  _createClass(SpectrogramDebugView, [{
    key: 'show',
    value: function show(data) {
      if (!data) {
        return;
      }

      var ctx = this.ctx;
      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

      ctx.beginPath();
      ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
      ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';
      ctx.lineWidth = 3;

      var coords = function coords(i) {
        return {
          x: i / data.length * ctx.canvas.width,
          y: (1 - data[i]) * ctx.canvas.height
        };
      };

      var start = coords(0);
      ctx.moveTo(start.x, start.y);
      for (var i = 0; i < data.length; i += 2) {
        var pt = coords(i);
        ctx.lineTo(pt.x, pt.y);
      }
      ctx.lineTo(3, ctx.canvas.height - 3);
      ctx.lineTo(start.x + 3, start.y - 3);
      ctx.fill();
      ctx.stroke();
    }
  }]);

  return SpectrogramDebugView;
}();

module.exports = SpectrogramDebugView;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Loads a JSON file.
 * @ignore
 * @param  {string} path The path of the image to load.
 * @return {Promise}     A Promise resolving when the file has been loaded.
 */
function loadJSON(path) {
  return fetch(path).then(function (data) {
    return data.json();
  });
}

/**
 * Loads an image.
 * @ignore
 * @param  {string} path The path of the image to load.
 * @return {Promise}     A Promise resolving when the file has been loaded.
 */
function loadImage(path) {
  return new Promise(function (resolve, reject) {
    var img = new Image();
    img.addEventListener('load', function (evt) {
      resolve(img);
    });
    img.src = path;
  });
}

/**
 * Loads a video file
 * @ignore
 * @param  {string} path The path of the video to load.
 * @return {Promise}     A Promise resolving when the file has been loaded.
 */
function loadVideo(path) {
  return new Promise(function (resolve, reject) {
    fetch(path).then(function (response) {
      return response.blob();
    }).then(function (blob) {
      var videoData = URL.createObjectURL(blob);
      var video = document.createElement('video');
      var itv = setInterval(function () {
        if (video.readyState === 4) {
          clearInterval(itv);
          resolve(video);
        }
      });
      video.src = videoData;
    }).catch(reject);
  });
}

/**
 * Load all available data currently implemented.
 * @ignore
 * @param  {string} folder Path to the prepro data folder
 * @param  {object} config The prepro.json config object
 * @return {Promise}       A promise resolving when everyting has been loaded.
 */
function loadAll(folder, config) {
  return new Promise(function (resolve, reject) {
    var data = {};
    var loaders = config.services.map(function (s) {
      var name = s.name.split('2').pop();
      var services = config.services_filter || ['openpose', 'colors', 'spectrogram', 'flow', 'segmentation', 'sift'];
      if (services.indexOf(name) == -1) {
        return;
      }
      switch (s.type) {
        case 'json':
          return loadJSON(folder + '/' + s.path).then(function (json) {
            return data[name] = json;
          });
        case 'png':
        case 'jpg':
          return loadImage(folder + '/' + s.path).then(function (image) {
            return data[name] = image;
          });
        case 'mov':
          return loadVideo(folder + '/' + s.path).then(function (video) {
            return data[name] = video;
          });
      }
    });
    Promise.all(loaders).then(function () {
      return resolve(data);
    }).catch(function (err) {
      console.error('Error loading files:');
      console.error(err);
    });
  });
}

/**
 * Used to request web services.
 * @ignore
 */
module.exports = loadAll;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Map service names to corresponding class.
 * @type Object
 * @private
 */
var services = ['colors', 'openpose', 'spectrogram', 'flow', 'segmentation', 'sift'];

/**
 * The Services dictionnary.
 */

var Services = function (_EventDispatcher) {
  _inherits(Services, _EventDispatcher);

  /**
   */
  function Services() {
    _classCallCheck(this, Services);

    var _this = _possibleConstructorReturn(this, (Services.__proto__ || Object.getPrototypeOf(Services)).call(this));
    /**
     * Services dictionnary.
     * @type {Object}
     * @private
     */


    _this.services_ = {};
    return _this;
  }

  /**
   * Setup the services from loaded data.
   * @param {Object} data - The data object generated by the Loader.
   * @private
   */


  _createClass(Services, [{
    key: 'setup',
    value: function setup(data) {
      var _this2 = this;

      for (var s in data) {
        if (services.indexOf(s) != -1) {
          var ServiceClass = __webpack_require__(20)("./" + s + '/service');
          this.services_[s] = new ServiceClass(data[s]);
          console.log(ServiceClass, data[s]);
          if (this.services_[s].addEventListener) {
            this.services_[s].addEventListener('ready', function (e) {
              return _this2.dispatch('ready', e);
            });
          }
        }
      }
    }

    /**
     * Return the service.
     * @param  {String} serviceName The name of the service.
     * @return {Service}            A Service object.
     */

  }, {
    key: 'get',
    value: function get(serviceName) {
      return this.services_[serviceName];
    }

    /**
     * Returns services frame
     * @param  {Integer} frameId The frame number
     * @return {Object}           The service object for each frame.
     */

  }, {
    key: 'getFrame',
    value: function getFrame(frameId) {
      var frame = { id: frameId };
      for (var service in this.services_) {
        frame[service] = this.services_[service].getFrame(frameId);
      }
      return frame;
    }
  }]);

  return Services;
}(_utils.EventDispatcher);

module.exports = Services;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./colors/service": 21,
	"./flow/service": 22,
	"./openpose/service": 23,
	"./segmentation/service": 24,
	"./sift/service": 25,
	"./spectrogram/service": 26
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 20;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BaseService = __webpack_require__(0);

/**
 * Class for each color frame.
 * It's an array of colors represented as an hexadecimal string.
 * @extends Array
 *
 * @example
 * console.log(myColorFrame)
 * // Prints: ['#ff0000', '#00ff00', '#0000ff', '#ffffff', '#000000']
 */

var ColorsFrame = function (_Array) {
  _inherits(ColorsFrame, _Array);

  function ColorsFrame(colors) {
    _classCallCheck(this, ColorsFrame);

    var _this = _possibleConstructorReturn(this, (ColorsFrame.__proto__ || Object.getPrototypeOf(ColorsFrame)).call(this));

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = colors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var c = _step.value;

        _this.push('#' + c);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return _this;
  }

  return ColorsFrame;
}(Array);

/**
 * Processed Colors Frames computed by the Colors service.
 */


var Colors = function (_BaseService) {
  _inherits(Colors, _BaseService);

  function Colors(data) {
    _classCallCheck(this, Colors);

    return _possibleConstructorReturn(this, (Colors.__proto__ || Object.getPrototypeOf(Colors)).call(this, data));
  }

  /**
   * @override
   */


  _createClass(Colors, [{
    key: 'data',
    set: function set(d) {
      this.data_ = d;
      this.frames = [];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = d[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var frameColors = _step2.value;

          this.frames.push(new ColorsFrame(frameColors));
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }]);

  return Colors;
}(BaseService);

module.exports = Colors;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseService2 = __webpack_require__(0);

var _BaseService3 = _interopRequireDefault(_BaseService2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Processed Flow Frames computed by the Flow service using OpenCV.
 *
 * Each frame is a canvas that contains an estimation of the movement of each
 * pixels in the source video.
 *
 * - The red channel contains the movement on the `x` axis
 * - The green channel contains the movement on the `y` axis
 * - The blue channel contains the movement on the `z` axis
 *
 * The canvas are saved at half the resolution of the source video for
 optimisation.
 */
var Flow = function (_BaseService) {
  _inherits(Flow, _BaseService);

  function Flow() {
    _classCallCheck(this, Flow);

    return _possibleConstructorReturn(this, (Flow.__proto__ || Object.getPrototypeOf(Flow)).apply(this, arguments));
  }

  _createClass(Flow, [{
    key: 'data',

    /**
     * @override
     */
    set: function set(video) {
      var _this2 = this;

      this.frames = [];

      video.pause();

      var numFrames = video.duration * prepro.config.framerate;

      // create frames;
      for (var i = 0; i < numFrames; i++) {
        var cnv = document.createElement('canvas');
        cnv.width = video.videoWidth;
        cnv.height = video.videoHeight;
        var ctx = cnv.getContext('2d');
        this.frames.push(ctx);
      }

      // draw frame function
      var drawNextFrame = function drawNextFrame() {
        var ctx = _this2.frames[_this2.currLoaded_];
        ctx.drawImage(video, 0, 0, ctx.canvas.width, ctx.canvas.height);
        _this2.currLoaded_++;
        if (_this2.currLoaded_ >= numFrames) {
          video.removeEventListener('seeked', drawNextFrame);
          _this2.dispatch('ready', 'flow');
        } else {
          video.currentTime = _this2.currLoaded_ / prepro.config.framerate;
        }
      };

      // launch draw frame pipeline
      this.currLoaded_ = 0;
      video.addEventListener('seeked', drawNextFrame);
      video.currentTime = this.currLoaded_ / prepro.config.framerate;
    }
  }]);

  return Flow;
}(_BaseService3.default);

module.exports = Flow;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseService2 = __webpack_require__(0);

var _BaseService3 = _interopRequireDefault(_BaseService2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Processed Openpose Frames computed by the Openpose service.
 */
var Openpose = function (_BaseService) {
  _inherits(Openpose, _BaseService);

  function Openpose() {
    _classCallCheck(this, Openpose);

    return _possibleConstructorReturn(this, (Openpose.__proto__ || Object.getPrototypeOf(Openpose)).apply(this, arguments));
  }

  _createClass(Openpose, [{
    key: 'data',
    set: function set(d) {
      this.data_ = d;
      this.frames = [];
      var total = Object.keys(d).length;
      this.frames[0] = d[1]['people'];
      for (var i = 1; i < total + 1; i++) {
        if (!d[i]) {
          console.warn('OpenPose data not available for frame ' + i + '.');
          continue;
        }
        this.frames[i] = d[i]['people'];
      }
    }
  }]);

  return Openpose;
}(_BaseService3.default);

module.exports = Openpose;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseService2 = __webpack_require__(0);

var _BaseService3 = _interopRequireDefault(_BaseService2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Processed Segmentation Frames computed by the MaskRCNN service.
 */
var Segmentation = function (_BaseService) {
  _inherits(Segmentation, _BaseService);

  function Segmentation() {
    _classCallCheck(this, Segmentation);

    return _possibleConstructorReturn(this, (Segmentation.__proto__ || Object.getPrototypeOf(Segmentation)).apply(this, arguments));
  }

  _createClass(Segmentation, [{
    key: 'data',
    set: function set(video) {
      var _this2 = this;

      this.frames = [];

      video.pause();

      var numFrames = video.duration * prepro.config.framerate;

      // create frames;
      for (var i = 0; i < numFrames; i++) {
        var cnv = document.createElement('canvas');
        cnv.width = video.videoWidth;
        cnv.height = video.videoHeight;
        var ctx = cnv.getContext('2d');
        this.frames.push(ctx);
      }

      // draw frame function
      var drawNextFrame = function drawNextFrame() {
        var ctx = _this2.frames[_this2.currLoaded_];
        ctx.drawImage(video, 0, 0, ctx.canvas.width, ctx.canvas.height);
        _this2.currLoaded_++;
        if (_this2.currLoaded_ >= numFrames) {
          video.removeEventListener('seeked', drawNextFrame);
          _this2.dispatch('ready', 'segmentation');
        } else {
          video.currentTime = _this2.currLoaded_ / prepro.config.framerate;
        }
      };

      // launch draw frame pipeline
      this.currLoaded_ = 0;
      video.addEventListener('seeked', drawNextFrame);
      video.currentTime = this.currLoaded_ / prepro.config.framerate;
    }
  }]);

  return Segmentation;
}(_BaseService3.default);

module.exports = Segmentation;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if ("value" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };

var _BaseService2 = __webpack_require__(0);

var _BaseService3 = _interopRequireDefault(_BaseService2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Processed SIFT Frames computed by the OpenCV Sift service.
 */
var Sift = function (_BaseService) {
  _inherits(Sift, _BaseService);

  function Sift() {
    _classCallCheck(this, Sift);

    return _possibleConstructorReturn(this, (Sift.__proto__ || Object.getPrototypeOf(Sift)).apply(this, arguments));
  }

  _createClass(Sift, [{
    key: 'data',
    set: function set(d) {
      _set(Sift.prototype.__proto__ || Object.getPrototypeOf(Sift.prototype), 'data', d, this);
      for (var i = 0; i < d.length; i++) {
        this.frames[i] = d[i];
      }
    }
  }]);

  return Sift;
}(_BaseService3.default);

module.exports = Sift;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _set = function set(object, property, value, receiver) { var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent !== null) { set(parent, property, value, receiver); } } else if ("value" in desc && desc.writable) { desc.value = value; } else { var setter = desc.set; if (setter !== undefined) { setter.call(receiver, value); } } return value; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BaseService = __webpack_require__(0);

/**
 * Processed Audio Spectrogram Frames computed by the Scipy Spectrogram service.
 */

var Spectrogram = function (_BaseService) {
  _inherits(Spectrogram, _BaseService);

  function Spectrogram() {
    _classCallCheck(this, Spectrogram);

    return _possibleConstructorReturn(this, (Spectrogram.__proto__ || Object.getPrototypeOf(Spectrogram)).apply(this, arguments));
  }

  _createClass(Spectrogram, [{
    key: 'data',
    set: function set(d) {
      _set(Spectrogram.prototype.__proto__ || Object.getPrototypeOf(Spectrogram.prototype), 'data', d, this);
      var w = d.width;
      var h = d.height;

      var canvas = document.createElement('canvas');
      canvas.width = w;
      canvas.height = h;
      var ctx = canvas.getContext('2d');
      ctx.drawImage(d, 0, 0, w, h);
      var pixels = ctx.getImageData(0, 0, w, h).data;
      for (var i = 0; i < w; i++) {
        var frame = [];
        for (var j = 0; j < h; j++) {
          var k = j * w + i;
          var v = pixels[k * 4];
          frame.push(v / 255);
        }
        this.frames.push(frame);
      }
    }
  }]);

  return Spectrogram;
}(BaseService);

module.exports = Spectrogram;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = __webpack_require__(1);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The Video class extends the video module to simplify video playback.
 * @extends EventDispatcher
 */
var Video = function (_EventDispatcher) {
  _inherits(Video, _EventDispatcher);

  /**
   * Creates a new Video object
   * @param {string} src    Path of the bideo to load.
   * @param {object} config (optional) An optional config object.
   */
  function Video(src, config) {
    _classCallCheck(this, Video);

    var _this = _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).call(this));

    _this.config_ = config;
    _this.framerate_ = _this.config_.framerate_;

    _this.el_ = document.createElement('video');
    _this.el_.loop = true;
    _this.el_.src = src;
    _this.el_.classList.add('prepro-video');
    _this.el_.addEventListener('click', _this.onVideoClicked_.bind(_this), false);

    _this.pct_ = 0;
    _this.interval_ = false;
    return _this;
  }

  /**
   * Starts playback of the video.
   */


  _createClass(Video, [{
    key: 'play',
    value: function play() {
      if (this.interval_) {
        return;
      }
      this.el_.play();
      this.interval_ = setInterval(this.update.bind(this), 1000 / this.framerate_);
    }

    /**
     * Pauses playback of the video.
     */

  }, {
    key: 'pause',
    value: function pause() {
      this.el_.pause();
      clearInterval(this.interval_);
      this.interval_ = false;
    }

    /**
     * Update handler, called on interval, everytime the video updates.
     */

  }, {
    key: 'update',
    value: function update() {
      this.pct_ = this.el_.currentTime / this.el_.duration;
      this.dispatch('update');
    }

    /**
     * Setter for the playback position in percent.
     * @param  {number} val The desired playhead position in percent / 100.
     */

  }, {
    key: 'onVideoClicked_',


    /**
     * Handler for click event on the video.
     * @param  {MouseEvent} evt The mouse event object.
     * @private
     */
    value: function onVideoClicked_(evt) {
      if (this.el_.paused) {
        this.play();
      } else {
        this.pause();
      }
    }
  }, {
    key: 'percent',
    set: function set(val) {
      this.pct_ = val;
      this.el_.pause();
      this.el_.currentTime = this.pct_ * this.el_.duration;
      this.update();
    }

    /**
     * Getter for the playback position in percent.
     * @return {number} The playback position in percent.
     */
    ,
    get: function get() {
      return this.pct_;
    }

    /**
     * Getter for the current frame.
     * @return {object} An object containing all the services data for the current
     *                  frame.
     */

  }, {
    key: 'currentFrame',
    get: function get() {
      return Math.floor(this.pct_ * this.config_.totalframes);
    }

    /**
     * Setter for the url of the video.
     * @param  {String} source Url of the video to Display.
     */

  }, {
    key: 'src',
    set: function set(source) {
      this.video.src = source;
    }

    /**
     * Getter for the current coordinates of the video as displayed.
     */

  }, {
    key: 'offset',
    get: function get() {
      var h = this.el_.videoHeight / this.el_.videoWidth * window.innerWidth;
      return { x: 0, y: (window.innerHeight - h) * 0.5 };
    }
  }]);

  return Video;
}(_utils.EventDispatcher);

module.exports = Video;

/***/ }),
/* 28 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })
/******/ ]);