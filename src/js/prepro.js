import View from './gui/view';
import loadAll from './loader';

import {Colors} from './services/colors';
import Openpose from './services/openpose';
import Spectrogram from './services/spectrogram';

const DEFAULT_CONFIG_FILENAME = 'prepro.json';
const DEFAULT_VIDEO_FILENAME = 'source.mov';

/**
 * Main Prepro class
 */
class Prepro {
  /**
   * Instanciate the Prepro class.
   */
  constructor() {
    this.services = {};
    this.frames = [];
    this.config = {};
    this.data = [];
  }

  /**
   * Loads a prepro data folder generated by the CLI.
   * @param  {String} folder The prepro data folder that contains prepro.json
   * @return {Promise}       A Promise that completes when everything is loaded.
   */
  load(folder) {
    return new Promise((resolve, reject) => {
      fetch(folder + '/' + DEFAULT_CONFIG_FILENAME)
          .then((data) => data.json())
          .then((config) => {
            this.config = config;
            this.config['folder'] = folder;
            loadAll(folder, config)
                .then((data) => {
                  this.data = data;
                  this.setupServices_(data);
                  this.addView('#prepro');
                  resolve();
                })
                .catch(reject);
          });
    });
  }

  /**
   * Add a view.
   * @param {Element|String} el View container element or query selector.
   */
  addView(el) {
    if (typeof el == 'string') {
      el = document.querySelector(el);
    }
    const videoFile = this.config.folder + '/' + DEFAULT_VIDEO_FILENAME;
    this.view = new View(el);
    this.view.setup(videoFile, this.config);
  }

  /**
   * Starts playback.
   */
  play() {
    if (!this.view) {
      console.warn('No view created. Have you called prepro.addView(el)?');
      return;
    }
    this.view.play();
  }

  /**
   * Pause playback.
   */
  pause() {
    if (!this.view) {
      console.warn('No view created. Have you called prepro.addView(el)?');
      return;
    }
    this.view.pause();
  }

  /**
   * Returns a snapshot of all the availalbe services for the current frame.
   * @return {Dictionary} The snapshot
   */
  getCurrentFrame() {
    if (!this.view) {
      console.warn('No view created. Have you called prepro.addView(el)?');
      return null;
    }
    const frameNum = Math.floor(this.view.pct * this.config.totalframes);
    const frame = {frame: frameNum};
    for (let service in this.services) {
      frame[service] = this.services[service].getFrame(frameNum);
    }
    return frame;
  }

  /**
   * Setup the services from loaded data.
   * @param {Object} data - The data object generated by the Loader.
   * @private
   */
  setupServices_(data) {
    this.services.colors = new Colors(data.colors);
    this.services.openpose = new Openpose(data.openpose);
    this.services.spectrogram = new Spectrogram(data.spectrogram);
  }
}

// TODO: TO BE MOVED
const el = document.getElementById('prepro');
el.classList.add('prepro-container');
window.prepro = new Prepro(el);

module.exports = Prepro;
